#ifndef __MACRO_DEF__
#define __MACRO_DEF__

#define PRINT_INSIDE 0
#define PRINT_OUTSIDE 0
#define PRINT_STEPS 0
#define PRINT_EXPECTATION_COUNT 0
#define PRINT_GRAMMAR_EACH_UPDATION_BEFORE 0
#define PRINT_GRAMMAR_EACH_UPDATION_AFTER 0
#define DEBUG_MODE 0
#define SANITARY_OUTPUT 1

#if SANITARY_OUTPUT == 1
#undef PRINT_INSIDE
#undef PRINT_OUTSIDE
#undef PRINT_STEPS
#undef PRINT_GRAMMAR_EACH_UPDATION_BEFORE
#undef PRINT_GRAMMAR_EACH_UPDATION_AFTER
#undef PRINT_EXPECTATION_COUNT
#endif


#define BYTES_GRAMMAR_TABLE_ITEMS 12
#define BYTE_4_CELL_PER_GRAMMAR_TABLE_ITEMS 3

#define MAX_SEQUENCE_LENGTH 500
#define MAX_GRAMMAR_ITEMS 256
#define MAX_NONTERMINATES 256

#define _32bit_t int32_t
#define SYMBOL_ID(SYMBOL_DESC) 
#define IS_EPSILON(SYMBOL_ID) ((SYMBOL_ID) == 0xFFFF)
#define IS_TERMINATE(SYMBOL_ID) ((SYMBOL_ID) >= N && (SYMBOL_ID) != 0xFFFF)
#define IS_NONTERMINATE(SYMBOL_ID) ((SYMBOL_ID) < N)

#define ALPHA_INCREASE(SYMBOL, I, J, VALUE) alpha[(SYMBOL) * MS * MS + (I) * MS + J] +=  VALUE;
#define BETA_INCREASE(SYMBOL, I, J, VALUE) beta[(SYMBOL) * MS * MS + (I) * MS + J] +=  VALUE;
#define MU_INCREASE(SYMBOL, I, J, VALUE) mu[(SYMBOL) * MS * MS + (I) * MS + J] +=  VALUE;

#define LOG_SUM_EXP_SET(A, B) A = log_sum_exp(A, B);


#define ALPHA(SYMBOL, I, J) alpha[(SYMBOL) * MS * MS + (I) * MS + J] 
#define BETA(SYMBOL, I, J) beta[(SYMBOL) * MS * MS + (I) * MS + J]
#define MU(GID, I, J) mu[(GID) * MS * MS + (I) * MS + J]
#define ALPHA_GET(SYMBOL, I, J) ((I) > (J) ? 0.0f : (SYMBOL) < N ? ALPHA(SYMBOL, I, J) : ((SYMBOL) == 0xFFFF ? -INFINITY: ((I) == (J) && sequence[I] == (SYMBOL) ? 0.0f : -INFINITY)))


#define SYMBOL_STR(SYMBOL_ID) ((SYMBOL_ID) < N ? grammar->reversed_nonterminate_map[(SYMBOL_ID)]: grammar->reversed_terminate_map[(SYMBOL_ID) - N])

#define POSSIBILITY_ADD(P1, P2) log_sum_exp((P1), (P2))


#define INIT_POSSIBILITY -INFINITY

#endif
